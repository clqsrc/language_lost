重要概念 2 : 左递归与解析中的死循环的解决

传统解析方法，所谓 “递归下降” 中最难处理的就是递归中的死循环问题。 我自己在开发过程中发现可以想办法先处理前导字符就可以避免，后来才知道这在编译原理知识体系中有固定的名词，即所谓 “左递归”。

有左递归的情况一定会引起死循环，解决办法在知识体系中也是早就有的，和我自己用的方法其实是一样的，就是再拆分这个左递归文法为不左递归的文法。

理论可以参考下面的这篇文章，不过还没找到好的实例，找到后再补充。

https://zhuanlan.zhihu.com/p/648346475

-----------------------------------------------
递归下降和递归向上以及左递归


递归下降（Recursive Descent）、递归向上（Recursive Ascent）和左递归（Left Recursion）是与编译原理和语法解析相关的重要概念。让我们逐个进行详细讲解：

1. 递归下降（Recursive Descent）：

递归下降是一种常见的自顶向下的语法解析方法，它是手动编写解析器的一种方式。在递归下降中，每个非终结符都对应一个解析函数，该函数根据非终结符的规则来递归地解析输入文本。递归下降的过程类似于自然语言的解析，因此易于理解和实现。每个解析函数负责处理特定的文法规则，通过递归调用其他解析函数来处理子规则。递归下降适用于上下文无关文法（CFG）。

递归下降的优点是直观易懂、易于错误处理和适用于自顶向下分析。但它可能会受到左递归规则的影响，需要进行特殊处理以避免无限递归。

2. 递归向上（Recursive Ascent）：

递归向上是一种自底向上的语法解析方法。与递归下降相反，递归向上是从最低级的终结符开始解析，逐步向上构建语法树，直到达到最高级的非终结符。在递归向上的过程中，解析函数使用递归调用来构建和连接语法树节点。

递归向上的一个常见应用是 LR 分析器（例如 LR(1) 和 LALR(1)）。LR 分析器通过构建一颗自底向上的推导树来分析输入文本。相比递归下降，LR 分析器通常能处理更复杂的语法，并且具有更高的解析效率。

3. 左递归（Left Recursion）：

左递归是一种语法规则的特性。当一个非终结符的产生式中以它自己作为第一个符号出现时，就称为左递归。例如，对于产生式 A -> Aα，其中 A 是非终结符，α 是一个符号串，这就是左递归。

左递归可能导致递归下降解析器进入无限递归的情况，从而导致解析器无法正常工作。因此，处理左递归是编写递归下降解析器时需要考虑的一个重要问题。常见的解决方法是消除左递归，将左递归的产生式转换为等价的非左递归产生式。

例如，对于左递归产生式 A -> Aα | β，可以通过以下方式转换为等价的非左递归产生式：

1. A -> β A' （新增一个非终结符 A'）

2. A' -> α A' | ε （A' 可以推导出空串 ε）

这样就消除了左递归，使得递归下降解析器能够正确处理这类文法。

递归下降和递归向上是两种不同的语法解析方法，适用于不同类型的文法。处理左递归是编写递归下降解析器时需要注意的问题，通常需要进行特殊处理。在实际应用中，根据语言的特性和需求选择适合的解析方法是非常重要的。

-----------------------------------------------
ε 在编译原理中表示空串。它也通常表示数学或者计算相关的无穷小。

参考
https://blog.csdn.net/Herm1one/article/details/106046309

字母表和符号串

    字母表：符号的非空有穷集合。
    符号：语言中最基本的不可再分的单位。
    符号串：符号串是字母表中符号组成的有穷序列，不含有任何符号的串叫空串，记作 ε \varepsilon ε。
    句子：字母表上符合某种规则构成的串。
    语言：字母表上句子的集合。
    约定用a,b,c…表示符号；用 α \alpha α, β \beta β, γ \gamma γ…表示符号串；用A,B,C…表示其集合。

字符串集合运算

    字母表A的n次方幂是字母表A上所有长度为n的符号串的集合。
    字母表A的闭包（包括空串）： A ∗ = A 0 ⋃ A 1 ⋃ A 2 ⋃ A 3 ⋃ . . . A^*=A^0 \bigcup A^1 \bigcup A^2 \bigcup A^3 \bigcup... A∗=A0⋃A1⋃A2⋃A3⋃...
    字母表A的正闭包（不包括空串）： A + = A 1 ⋃ A 2 ⋃ A 3 ⋃ . . . A^+=A^1 \bigcup A^2 \bigcup A^3 \bigcup... A+=A1⋃A2⋃A3⋃...
    语言：是字母表上正闭包的子集。
————————————————
另：
 编译原理的终结符和非终结符如何理解?

一、非终结符：

1、非终结符可以再分成更细的东西。

2、不是终结符的都是非终结符。非终结符可理解为一个可拆分元素，而终结符是不可拆分的最小元素。终结符号就是语言中用到的基本元素，名词、动词、形容词、助词等等基本语言单位。

二、终结符：

1、终结符直接就代表一个意思，比如关键字if就不能再分成i和f了。

2、通俗的说就是不能单独出现在推导式左边的符号，也就是说终结符不能再进行推导。非终结符则是"语法"中用到的元素，除非谈论"语法"，一般交谈语言中并不会用到非终结符。比如：主语、短语、词组、句子




